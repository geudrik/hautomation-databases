"""Create inital DB

Revision ID: 5d7db01ee1ff
Revises:
Create Date: 2016-11-16 10:24:10.134152

"""

# revision identifiers, used by Alembic.
revision = '5d7db01ee1ff'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from hsdb import User
from hsdb import Password
from hsdb import HomestackDatabase as HSDB
from hsdb import Role as HSRole
from hsdb import UserGroup as HSUserGroup

from argon2 import argon2_hash

import datetime

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Passwords',
    sa.Column('password_id', mysql.INTEGER(unsigned=True), nullable=False),
    sa.Column('hashed_password', sa.BINARY(length=128), nullable=False),
    sa.PrimaryKeyConstraint('password_id')
    )
    op.create_index(op.f('ix_Passwords_hashed_password'), 'Passwords', ['hashed_password'], unique=False)
    op.create_table('Roles',
    sa.Column('role_id', mysql.INTEGER(unsigned=True), nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), nullable=False),
    sa.PrimaryKeyConstraint('role_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('UserGroups',
    sa.Column('group_id', mysql.INTEGER(unsigned=True), nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), nullable=False),
    sa.PrimaryKeyConstraint('group_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('Users',
    sa.Column('user_id', mysql.INTEGER(unsigned=True), nullable=False),
    sa.Column('time', mysql.DATETIME(), nullable=False),
    sa.Column('timestamp', mysql.DATETIME(), nullable=False),
    sa.Column('username', sa.VARCHAR(length=128), nullable=False),
    sa.Column('password_salt', sa.BINARY(length=32), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_Users_password_salt'), 'Users', ['password_salt'], unique=False)
    op.create_index(op.f('ix_Users_time'), 'Users', ['time'], unique=False)
    op.create_index(op.f('ix_Users_timestamp'), 'Users', ['timestamp'], unique=False)
    op.create_table('ApiKeys',
    sa.Column('api_key_id', mysql.INTEGER(unsigned=True), nullable=False),
    sa.Column('user_id', mysql.INTEGER(unsigned=True), nullable=False),
    sa.Column('api_key', sa.VARCHAR(length=36), nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), nullable=True),
    sa.Column('created', mysql.DATETIME(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['Users.user_id'], ),
    sa.PrimaryKeyConstraint('api_key_id'),
    sa.UniqueConstraint('api_key')
    )
    op.create_index(op.f('ix_ApiKeys_created'), 'ApiKeys', ['created'], unique=False)
    op.create_table('UserGroupsToRoles',
    sa.Column('user_group_id', mysql.INTEGER(unsigned=True), nullable=True),
    sa.Column('role_id', mysql.INTEGER(unsigned=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['Roles.role_id'], ),
    sa.ForeignKeyConstraint(['user_group_id'], ['UserGroups.group_id'], )
    )
    op.create_table('UsersToUserGroups',
    sa.Column('user_id', mysql.INTEGER(unsigned=True), nullable=True),
    sa.Column('user_group_id', mysql.INTEGER(unsigned=True), nullable=True),
    sa.ForeignKeyConstraint(['user_group_id'], ['UserGroups.group_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['Users.user_id'], )
    )
    ### end Alembic commands ###

    session = User._session

    # Create a few base Roles
    roles = ["admin", "read_all", "hue_rw", "nest_rw"]
    for role in roles:
        HSRole.insert(name=role)

    # Create a few base groups
    groups = {
        "adminstrator" : ['admin'],
        "user" : ['read_all'],
        "google" : ['hue_rw', 'nest_rw']
    }

    # Create group/role mappings in the DB
    for group, roles in groups.iteritems():
        g = HSUserGroup.insert(name=group)

        for role in roles:
            r = HSRole.filter_by(name=role).first()
            g.roles.append(r)

    session.commit()

    # Create our admin/admin user
    now = datetime.datetime.utcnow()
    u = User.insert(username='admin', time=now, timestamp=now)
    session.commit()
    session.flush()
    p = Password.insert(hashed_password=bytearray(argon2_hash("admin", u.password_salt, t=2000, m=1024)))
    session.commit()


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('UsersToUserGroups')
    op.drop_table('UserGroupsToRoles')
    op.drop_index(op.f('ix_ApiKeys_created'), table_name='ApiKeys')
    op.drop_table('ApiKeys')
    op.drop_index(op.f('ix_Users_timestamp'), table_name='Users')
    op.drop_index(op.f('ix_Users_time'), table_name='Users')
    op.drop_index(op.f('ix_Users_password_salt'), table_name='Users')
    op.drop_table('Users')
    op.drop_table('UserGroups')
    op.drop_table('Roles')
    op.drop_index(op.f('ix_Passwords_hashed_password'), table_name='Passwords')
    op.drop_table('Passwords')
    ### end Alembic commands ###
